The basic operation code for the buzzer is located in the folder named ArduinoCode/Keypad on OneDrive. It is also included in this document.


 - CODE:

const int keyVals[16] = {809, 827, 924, 0, 
                         166, 219, 503, 0,
                         269, 313, 562, 0,
                         0,   647, 0,   994};
const char keys[16] = {'1', '2', '3', 'A', 
                       '4', '5', '6', 'B',
                       '7', '8', '9', 'C',
                       '*', '0', '#', 'D'};
int range = 5;
int lastButton = -1;
unsigned long lastPressTime = 0;
bool buttonReleased = true;

void setup() {
  Serial.begin(9600);
  //getMeanVoltage();
}

void loop() {
  unsigned long currentTime = millis();

  int keyIn = analogRead(A1); // Read the keypad input
  /*Serial.print ("A1 voltage: ");
  Serial.println(keyIn);*/
  int detectedButton = detectButton(keyIn); // Find with button is detected

  if (detectedButton != -1) {
    if (buttonReleased) {
      Serial.print("New key pulsed: ");
      Serial.println(keys[detectedButton]);
      lastButton = detectedButton;
      lastPressTime = currentTime;
      buttonReleased = false;
      delay(100);
    }
  } 
  
  else if (detectedButton == -1) {
    buttonReleased = true;
    //Serial.println("Se ha dejado de pulsar el teclado");
  }
  delay (500);
}

int detectButton(int inputValue) {
  /*Serial.print ("A1 voltage in function: ");
  Serial.println(inputValue);*/
  for (int i = 0; i < 16; i++) {
    if (inputValue >= keyVals[i] - range && inputValue <= keyVals[i] + range) {
      return i; // Devuelve el índice del botón detectado
      }
  }
  return -1;
}

void getMeanVoltage() {
  Serial.println("Getting mean voltageof each key...");

  for (int i = 0; i < 100; i++) {
    int sum = 0;
    for (int j = 0; j < 100; j++) {
      sum += analogRead(A1); // Read analog value
      delay(10);
    }
    float averageVoltage = (float)sum / 100.0; // Compute the mean
    Serial.print("Key: ");
    Serial.print(i);
    Serial.print(" - Mean volatage: ");
    Serial.println(averageVoltage);
  }
}

 - TEST:

To verify the correct operation of both the circuit and the created code, measurements were taken in various ways. One method involved using the getMeanVoltage() function, which takes multiple measurements when a key is pressed and returns the average value of the pin. Another measurement involved checking the pin value when calling the detectButton() function, allowing observation of the A1 pin value at that moment.

Once the measurements were obtained, these values were stored in an array for comparison within the detectButton() function. The code was then executed by pressing the different keys multiple times and in different sequences, aiming to verify whether the keys pressed and those detected by the program aligned correctly.

All the values has a tolerance up and down of 5. The keys are the numbers between 0-9 and the letter 'D'. The 'D' will act as the enter key.


 - PROBLEMS AND SOLUTIONS:

The main issue encountered was related to key detection. Due to the lack of lower tolerance resistors, readings from pin A1 could significantly vary between consecutive reads of the same key. This was resolved by adjusting the resistors on certain rows and columns until achieving a noticeable difference among all keys. Additionally, since not all keys were necessary for our alarm keypad, some of them were ignored to reduce the overlap of ranges between keys. We could see it on the next text: 
	1-> (810, 806, 810, 809, 810) -> 809
	2-> (827, 826, 828, 824, 828) -> 827
	3-> (926, 923, 925, 920, 924) -> 924
	4-> (166, 180, 162, 164, 164) -> 167
	5-> (220, 219, 219, 220, 218) -> 219
	6-> (503, 501, 503, 505, 503) -> 503
	7-> (267, 267, 268, 274, 267) -> 269
	8-> (312, 313, 313, 314, 314) -> 313
	9-> (565, 564, 562, 558, 563) -> 562
	0-> (164, 165, 167, 166, 167) -> 166
	D-> (952, 945, 945, 945, 949) -> 947
Like the 0 and 4 are to close, the R4 resistor has been changes because only affects 0 and D keys, from 100 Ohms to 3.3 KOhms. The new 0 values are:
	0-> (648, 646, 648, 646, 647) -> 647
	D-> (997, 992, 993, 993, 994) -> 994


The second problem is that to detect key presses, contact must occur between the conductor on the key and the conductor on the keyboard base. In some keys, this contact is not detected accurately, requiring precise key pressing to change the value of pin A1. This issue has not been resolved yet. One potential solution, utilizing the same keyboard, could involve associating the buzzer with the keyboard. When a key is pressed, the buzzer would emit a sound to alert the user that their press has been successful.
The 4,5 and D keys work a little poorly and have to be pressed several times until they are detected.

