The basic operation code for the buzzer is located in the folder named ArduinoCode/Buzzer on OneDrive. It is also included in this document.


- CODE:
const int buzzer = 4; //buzzer to arduino digital pin 0
int intruder = 0;

void setup(){
  pinMode(buzzer, OUTPUT); // Set buzzer - pin 0 as an output
  digitalWrite(buzzer, HIGH);
}

void loop(){
  Serial.print ("Intruder value: ");
  Serial.println(intruder);
  if (intruder == 1){
    Serial.println("Intruder detected");
    activeAlarm();
  }
}

// intruderLevel is an integer between 1 and 3
// which indicates different infractions
void activeAlarm(int intruderLevel){
    tone(buzzer, 10);   // Send 1KHz sound signal...
    delay(1000);        // ...for 1 sec
    noTone(buzzer);     // reset to get a new sound...
    delay(1000);        // ...for 1sec
    
    if (intruderLevel == 1) {
      Serial.println("Level 1 intruder detected");
      tone(buzzerPin, 10); // Frecuencia para el tono más bajo
      delay(1000);        // ...for 1 sec
      noTone(buzzer);     // reset to get a new sound...
      delay(1000);        // ...for 1sec
    } 
    else if (intruderLevel == 2) {
      Serial.println("Level 2 intruder detected");
      tone(buzzerPin, 100); // Frecuencia para el tono medio
      delay(1000);        // ...for 1 sec
      noTone(buzzer);     // reset to get a new sound...
      delay(1000);        // ...for 1sec
    } 
    else if (intruderLevel == 3) {
      Serial.println("Level 3 intruder detected");
      tone(buzzerPin, 500); // Frecuencia para el tono más alto
      delay(1000);        // ...for 1 sec
      noTone(buzzer);     // reset to get a new sound...
      delay(1000);        // ...for 1sec
    }
    intruder = 0; // Restablecer la variable intruso a 0
}


- TEST:

To verify its correct functionality, the three types of sounds that the buzzer should produce were tested. The variable "intruder" was manually adjusted with values ranging from 0 (no sound) to 3 (maximum level of intrusion), observing whether the intended changes in the sound were indeed taking place.


- PROBLEMS AND SOLUTIONS:

The first issue encountered was the continuous buzzing of the buzzer. It was discovered that this was because, by default, the passive buzzer operates with a negative pin value, which is the default value for all pins on the MKR 1010 board. This was resolved by including an instruction at the beginning of the code that sets the connection pin to HIGH, preventing the buzzer from constantly sounding.

The second issue was the inability to stop the sound using the noTone() instruction. This is because the instruction does not stop the tone for a passive buzzer; instead, it resets the tone to subsequently start a tone with a different frequency. This was resolved by encapsulating the buzzer sound code within a function. As a result, it is not called in the loop() and only sounds at specific moments.